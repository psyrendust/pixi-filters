{"version":3,"file":"filters.es.min.js","sources":["../src/ascii/AsciiFilter.js","../src/bloom/BloomFilter.js","../src/bulgepinch/BulgePinchFilter.js","../src/colorreplace/ColorReplaceFilter.js","../src/convolution/ConvolutionFilter.js","../src/crosshatch/CrossHatchFilter.js","../src/dot/DotFilter.js","../src/dropshadow/DropShadowFilter.js","../src/emboss/EmbossFilter.js","../src/glow/GlowFilter.js","../src/outline/OutlineFilter.js","../src/pixelate/PixelateFilter.js","../src/rgb/RGBSplitFilter.js","../src/shockwave/ShockwaveFilter.js","../src/simplelightmap/SimpleLightmapFilter.js","../src/tiltshift/TiltShiftAxisFilter.js","../src/tiltshift/TiltShiftXFilter.js","../src/tiltshift/TiltShiftYFilter.js","../src/tiltshift/TiltShiftFilter.js","../src/twist/TwistFilter.js"],"sourcesContent":["import vertex from '../fragments/default.vert';\nimport fragment from './ascii.frag';\n\n// TODO (cengler) - The Y is flipped in this shader for some reason.\n\n/**\n * @author Vico @vicocotea\n * original shader : https://www.shadertoy.com/view/lssGDj by @movAX13h\n */\n\n/**\n * An ASCII filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [size=8] Size of the font\n */\nexport default class AsciiFilter extends PIXI.Filter {\n    \n    constructor(size = 8) {\n        super(vertex, fragment);\n        this.size = size;\n    }\n\n    /**\n     * The pixel size used by the filter.\n     *\n     * @member {number}\n     */\n    get size() {\n        return this.uniforms.pixelSize;\n    }\n    set size(value) {\n        this.uniforms.pixelSize = value;\n    }\n}\n","const {BlurXFilter, BlurYFilter, VoidFilter} = PIXI.filters;\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number|PIXI.Point} [blur=2] Sets the strength of both the blurX and blurY properties simultaneously\n */\nexport default class BloomFilter extends PIXI.Filter {\n\n    constructor(blur = 2) {\n        super();\n        this.blurXFilter = new BlurXFilter();\n        this.blurYFilter = new BlurYFilter();\n        this.blurYFilter.blendMode = PIXI.BLEND_MODES.SCREEN;\n        this.defaultFilter = new VoidFilter();\n\n        if (typeof blur === 'number') {\n            this.blur = blur;\n        }\n        else if (blur instanceof PIXI.Point) {\n            this.blurX = blur.x;\n            this.blurY = blur.y;\n        }\n    }\n\n    apply(filterManager, input, output) {\n        const renderTarget = filterManager.getRenderTarget(true);\n\n        //TODO - copyTexSubImage2D could be used here?\n        this.defaultFilter.apply(filterManager, input, output);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget);\n        this.blurYFilter.apply(filterManager, renderTarget, output);\n\n        filterManager.returnRenderTarget(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this.blurXFilter.blur;\n    }\n    set blur(value) {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX() {\n        return this.blurXFilter.blur;\n    }\n    set blurX(value) {\n        this.blurXFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY() {\n        return this.blurYFilter.blur;\n    }\n    set blurY(value) {\n        this.blurYFilter.blur = value;\n    }\n}\n","import vertex from './bulgePinch.vert';\nimport fragment from './bulgePinch.frag';\n\n/**\n * @author Julien CLEREL @JuloxRox\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\n */\n \n/**\n * Bulges or pinches the image in a circle.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point|Array<number>} [center=[0,0]] The x and y coordinates of the center of the circle of effect.\n * @param {number} [radius=100] The radius of the circle of effect.\n * @param {number} [strength=1] -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n */\nexport default class BulgePinchFilter extends PIXI.Filter {\n\n    constructor(center, radius, strength) {\n        super(vertex, fragment);\n        this.center = center || [0.5, 0.5];\n        this.radius = radius || 100;\n        this.strength = strength || 1;\n    }\n\n    /**\n     * The radius of the circle of effect.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     *\n     * @member {number}\n     */\n    get strength() {\n        return this.uniforms.strength;\n    }\n    set strength(value) {\n        this.uniforms.strength = value;\n    }\n\n    /**\n     * The x and y coordinates of the center of the circle of effect.\n     *\n     * @member {PIXI.Point}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n}\n","import vertex from './colorReplace.vert';\nimport fragment from './colorReplace.frag';\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number|Array<number>} [originalColor=0xFF0000] The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n * @param {number|Array<number>} [newColor=0x000000] The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n * @param {number} [epsilon=0.4] Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter(\n *   [1, 0, 0],\n *   [0, 0, 1],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(\n *   [220/255.0, 220/255.0, 220/255.0],\n *   [225/255.0, 200/255.0, 215/255.0],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(0xdcdcdc, 0xe1c8d7, 0.001)];\n *\n */\nexport default class ColorReplaceFilter extends PIXI.Filter {\n\n    constructor(originalColor = 0xFF0000, newColor = 0x000000, epsilon = 0.4) {\n        super(vertex, fragment);\n        this.originalColor = originalColor;\n        this.newColor = newColor;\n        this.epsilon = epsilon;\n    }\n\n    /**\n     * The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n     * @member {number|Array<number>}\n     * @default 0xFF0000\n     */\n    set originalColor(value) {\n        let arr = this.uniforms.originalColor;\n        if (typeof value === 'number') {\n            PIXI.utils.hex2rgb(value, arr);\n            this._originalColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._originalColor = PIXI.utils.rgb2hex(arr);\n        }\n    }\n    get originalColor() {\n        return this._originalColor;\n    }\n\n    /**\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>}\n     * @default 0x000000\n     */\n    set newColor(value) {\n        let arr = this.uniforms.newColor;\n        if (typeof value === 'number') {\n            PIXI.utils.hex2rgb(value, arr);\n            this._newColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._newColor = PIXI.utils.rgb2hex(arr);\n        }\n    }\n    get newColor() {\n        return this._newColor;\n    }\n\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @member {number}\n     * @default 0.4\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './convolution.frag';\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param matrix {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param width {number} Width of the object you are transforming\n * @param height {number} Height of the object you are transforming\n */\nexport default class ConvolutionFilter extends PIXI.Filter {\n\n    constructor(matrix, width, height) {\n        super(vertex, fragment);\n        this.matrix = matrix;\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {Array<number>}\n     */\n    get matrix() {\n        return this.uniforms.matrix;\n    }\n    set matrix(value) {\n        this.uniforms.matrix = new Float32Array(value);\n    }\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     */\n    get width() {\n        return 1/this.uniforms.texelSize[0];\n    }\n    set width(value) {\n        this.uniforms.texelSize[0] = 1/value;\n    }\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     */\n    get height() {\n        return 1/this.uniforms.texelSize[1];\n    }\n    set height(value) {\n        this.uniforms.texelSize[1] = 1/value;\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './crosshatch.frag';\n\n/**\n * A Cross Hatch effect filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class CrossHatchFilter extends PIXI.Filter {\n    constructor() {\n        super(vertex, fragment);\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './dot.frag';\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js\n */\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [scale=1] The scale of the effect.\n * @param {number} [angle=5] The radius of the effect.\n */\nexport default class DotFilter extends PIXI.Filter {\n\n    constructor(scale = 1, angle = 5) {\n        super(vertex, fragment);\n        this.scale = scale;\n        this.angle = angle;\n    }\n\n    /**\n     * The scale of the effect.\n     * @member {number}\n     * @default 1\n     */\n    get scale() {\n        return this.uniforms.scale;\n    }\n    set scale(value) {\n        this.uniforms.scale = value;\n    }\n\n    /**\n     * The radius of the effect.\n     * @member {number}\n     * @default 5\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './dropshadow.frag';\n\n/**\n * Drop shadow filter.\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [rotation=45] The angle of the shadow in degrees.\n * @param {number} [distance=5] Distance of shadow\n * @param {number} [blur=2] Blur of the shadow\n * @param {number} [color=0x000000] Color of the shadow\n * @param {number} [alpha=0.5] Alpha of the shadow\n */\nexport default class DropShadowFilter extends PIXI.Filter {\n    constructor(rotation = 45, distance = 5, blur = 2, color = 0x000000, alpha = 0.5) {\n        super();\n\n        this.tintFilter = new PIXI.Filter(vertex, fragment);\n        this.blurFilter = new PIXI.filters.BlurFilter();\n        this.blurFilter.blur = blur;\n\n        this.rotation = rotation;\n        this.padding = distance;\n        this.distance = distance;\n        this.alpha = alpha;\n        this.color = color;\n    }\n\n    apply(filterManager, input, output) {\n        const target = filterManager.getRenderTarget();\n        target.clear();\n        if (!output.root) {\n            output.clear();\n        }\n        target.transform = new PIXI.Matrix();\n        target.transform.translate(\n            this.distance * Math.cos(this.angle), \n            this.distance * Math.sin(this.angle)\n        );\n        this.tintFilter.apply(filterManager, input, target);\n        this.blurFilter.apply(filterManager, target, output);\n        super.apply(filterManager, input, output);\n        target.transform = null;\n        filterManager.returnRenderTarget(target);\n    }\n\n    updatePadding() {\n        this.padding = Math.max(this.distance, 10) * this.blur * 2;\n    }\n\n    /**\n     * Distance offset of the shadow\n     * @member {number}\n     * @default 5\n     */\n    get distance() {\n        return this._distance;\n    }\n    set distance(value) {\n        this._distance = value;\n        this.updatePadding();\n    }\n\n    /**\n     * The angle of the shadow in degrees\n     * @member {number}\n     * @default 2\n     */\n    get rotation() {\n        return this.angle / PIXI.DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this.angle = value * PIXI.DEG_TO_RAD;\n    }\n\n    /**\n     * The blur of the shadow\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this.blurFilter.blur;\n    }\n    set blur(value) {\n        this.blurFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * The alpha of the shadow\n     * @member {number}\n     * @default 1\n     */\n    get alpha() {\n        return this.tintFilter.uniforms.alpha;\n    }\n    set alpha(value) {\n        this.tintFilter.uniforms.alpha = value;\n    }\n\n    /**\n     * The color of the shadow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this.tintFilter.uniforms.color);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this.tintFilter.uniforms.color);\n    }\n}\n\n","import vertex from '../fragments/default.vert';\nimport fragment from './emboss.frag';\n\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [strength=5] Strength of the emboss.\n */\nexport default class EmbossFilter extends PIXI.Filter {\n    constructor(strength = 5){\n        super(vertex, fragment);\n        this.strength = strength;\n    }\n\n    /**\n     * Strength of emboss.\n     *\n     * @member {number}\n     */\n    get strength() {\n        return this.uniforms.strength;\n    }\n    set strength(value) {\n        this.uniforms.strength = value;\n    }\n}\n","import vertex from './glow.vert';\nimport fragment from './glow.frag';\n\n/**\n * GlowFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\n * http://codepen.io/mishaa/pen/raKzrm\n *\n * @class\n * \n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [distance=10] The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n * @param {number} [outerStrength=4] The strength of the glow outward from the edge of the sprite.\n * @param {number} [innerStrength=0] The strength of the glow inward from the edge of the sprite.\n * @param {number} [color=0xffffff] The color of the glow.\n * @param {number} [quality=0.1] A number between 0 and 1 that describes the quality of the glow.\n *\n * @example\n *  someSprite.filters = [\n *      new GlowFilter(15, 2, 1, 0xFF0000, 0.5)\n *  ];\n */\nexport default class GlowFilter extends PIXI.Filter {\n\n    constructor(distance = 10, outerStrength = 4, innerStrength = 0, color = 0xffffff, quality = 0.1) {\n        super(vertex, fragment\n            .replace(/%QUALITY_DIST%/gi, '' + (1 / quality / distance).toFixed(7))\n            .replace(/%DIST%/gi, '' + distance.toFixed(7)));\n\n        this.uniforms.glowColor = new Float32Array([0, 0, 0, 1]);\n        this.distance = distance;\n        this.color = color;\n        this.outerStrength = outerStrength;\n        this.innerStrength = innerStrength;\n    }\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this.uniforms.glowColor);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.glowColor);\n    }\n\n    /**\n     * The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n     * @member {number}\n     * @default 10\n     */\n    get distance() {\n        return this.uniforms.distance;\n    }\n    set distance(value) {\n        this.uniforms.distance = value;\n    }\n\n    /**\n     * The strength of the glow outward from the edge of the sprite.\n     * @member {number}\n     * @default 4\n     */\n    get outerStrength() {\n        return this.uniforms.outerStrength;\n    }\n    set outerStrength(value) {\n        this.uniforms.outerStrength = value;\n    }\n\n    /**\n     * The strength of the glow inward from the edge of the sprite.\n     * @member {number}\n     * @default 0\n     */\n    get innerStrength() {\n        return this.uniforms.innerStrength;\n    }\n    set innerStrength(value) {\n        this.uniforms.innerStrength = value;\n    }\n}","import vertex from './outline.vert';\nimport fragment from './outline.frag';\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [thickness=1] The tickness of the outline. Make it 2 times more for resolution 2\n * @param {number} [color=0x000000] The color of the glow.\n *\n * @example\n *  someSprite.shader = new OutlineFilter(9, 0xFF0000);\n */\nexport default class OutlineFilter extends PIXI.Filter {\n\n    constructor(thickness = 1, color = 0x000000) {\n        super(vertex, fragment.replace(/%THICKNESS%/gi, (1.0 / thickness).toFixed(7)));\n        this.thickness = thickness;\n        this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\n        this.color = color;\n    }\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return PIXI.utils.rgb2hex(this.uniforms.outlineColor);\n    }\n    set color(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.outlineColor);\n    }\n\n    /**\n     * The tickness of the outline. Make it 2 times more for resolution 2\n     * @member {number}\n     * @default 1\n     */\n    get thickness() {\n        return this.uniforms.thickness;\n    }\n    set thickness(value) {\n        this.uniforms.thickness = value;\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './pixelate.frag';\n\n/**\n * This filter applies a pixelate effect making display objects appear 'blocky'.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point|Array<number>|number} [size=10] Either the width/height of the size of the pixels, or square size\n */\nexport default class PixelateFilter extends PIXI.Filter {\n\n    constructor(size = 10) {\n        super(vertex, fragment);\n        this.size = size; \n    }\n\n    /**\n     * This a point that describes the size of the blocks.\n     * x is the width of the block and y is the height.\n     *\n     * @member {PIXI.Point|Array<number>|number}\n     * @default 10\n     */\n    get size() {\n        return this.uniforms.size;\n    }\n    set size(value) {\n        if (typeof value === 'number') {\n            value = [value, value];\n        }\n        this.uniforms.size = value;\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './rgb-split.frag';\n\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point} [red=[-10,0]] Red channel offset\n * @param {PIXI.Point} [green=[0, 10]] Green channel offset\n * @param {PIXI.Point} [blue=[0, 0]] Blue channel offset\n */\nexport default class RGBSplitFilter extends PIXI.Filter {\n    constructor(red = [-10, 0], green = [0, 10], blue = [0, 0]) {\n        super(vertex, fragment);\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './shockwave.frag';\n\n/**\n * The ColorMatrixFilter class lets you apply a 4x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {PIXI.Point} [center=[0.5, 0.5]] See center property\n * @param {Array<number>} [params=[10, 0.8, 0.1]] See params property\n * @param {number} [time=0] See time property\n */\nexport default class ShockwaveFilter extends PIXI.Filter {\n\n    constructor(center = [0.5, 0.5], params = [10, 0.8, 0.1], time = 0) {\n        super(vertex, fragment, {\n            center: { type: 'v2', value: { x: 0.5, y: 0.5 } },\n            params: { type: 'v3', value: { x: 10, y: 0.8, z: 0.1 } },\n            time: { type: '1f', value: 0 }\n        });\n\n        this.center = center;\n        this.params = params;\n        this.time = time;\n    }\n\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {PIXI.Point}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n\n    /**\n     * Sets the params of the shockwave. These modify the look and behavior of\n     * the shockwave as it ripples out.\n     *\n     * @member {Array<number>}\n     */\n    get params() {\n        return this.uniforms.params;\n    }\n    set params(value) {\n        this.uniforms.params = value;\n    }\n\n    /**\n     * Sets the elapsed time of the shockwave. This controls the speed at which\n     * the shockwave ripples out.\n     *\n     * @member {number}\n     */\n    get time() {\n        return this.uniforms.time;\n    }\n    set time(value) {\n        this.uniforms.time = value;\n    }\n}\n","import vertex from './simpleLightmap.vert';\nimport fragment from './simpleLightmap.frag';\n\n/**\n* SimpleLightmap, originally by Oza94\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\n* http://codepen.io/Oza94/pen/EPoRxj\n*\n* @class\n* @extends PIXI.Filter\n* @memberof PIXI.filters\n* @param {PIXI.Texture} lightmapTexture a texture where your lightmap is rendered\n* @param {Array<number>} ambientColor An RGBA array of the ambient color\n* @param {Array<number>} [resolution=[1, 1]] An array for X/Y resolution\n*\n* @example\n*  var lightmapTex = new PIXI.RenderTexture(renderer, 400, 300);\n*\n*  // ... render lightmap on lightmapTex\n*\n*  stageContainer.filters = [\n*    new SimpleLightmapFilter(lightmapTex, [0.3, 0.3, 0.7, 0.5], [1.0, 1.0])\n*  ];\n*/\nexport default class SimpleLightmapFilter extends PIXI.Filter {\n\n    constructor(lightmapTexture, ambientColor, resolution = [1, 1]) {    \n        super(vertex, fragment);\n        this.uniforms.u_lightmap = lightmapTexture;\n        this.uniforms.resolution = new Float32Array(resolution);\n        this.uniforms.ambientColor =  new Float32Array(ambientColor);\n    }\n\n\n    /**\n     * a texture where your lightmap is rendered\n     * @member {PIXI.Texture}\n     */\n    get texture() {\n        return this.uniforms.u_lightmap;\n    }\n    set texture(value) {\n        this.uniforms.u_lightmap = value;\n    }\n\n    /**\n     * An RGBA array of the ambient color\n     * @member {Array<number>}\n     */\n    get color() {\n        return this.uniforms.ambientColor;\n    }\n    set color(value) {\n        this.uniforms.ambientColor = new Float32Array(value);\n    }\n\n    /**\n     * An array for X/Y resolution\n     * @member {Array<number>}\n     */\n    get resolution() {\n        return this.uniforms.resolution;\n    }\n    set resolution(value) {\n        this.uniforms.resolution = new Float32Array(value);\n    }\n}\n","import vertex from '../fragments/default.vert';\nimport fragment from './tilt-shift.frag';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @private\n */\nexport default class TiltShiftAxisFilter extends PIXI.Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null){\n        super(vertex, fragment);\n        this.uniforms.blur = blur;\n        this.uniforms.gradientBlur = gradientBlur;\n        this.uniforms.start = start || new PIXI.Point(0, window.innerHeight / 2);\n        this.uniforms.end = end || new PIXI.Point(600, window.innerHeight / 2);\n        this.uniforms.delta = new PIXI.Point(30, 30);\n        this.uniforms.texSize = new PIXI.Point(window.innerWidth, window.innerHeight);\n        this.updateDelta();\n    }\n\n    /**\n     * Updates the filter delta values.\n     * This is overridden in the X and Y filters, does nothing for this class.\n     *\n     */\n    updateDelta() {\n        this.uniforms.delta.x = 0;\n        this.uniforms.delta.y = 0;\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get blur() {\n        return this.uniforms.blur;\n    }\n    set blur(value) {\n        this.uniforms.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get gradientBlur() {\n        return this.uniforms.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.uniforms.gradientBlur = value;\n    }\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get start() {\n        return this.uniforms.start;\n    }\n    set start(value) {\n        this.uniforms.start = value;\n        this.updateDelta();\n    }\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get end() {\n        return this.uniforms.end;\n    }\n    set end(value) {\n        this.uniforms.end = value;\n        this.updateDelta();\n    }\n}\n","import TiltShiftAxisFilter from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nexport default class TiltShiftXFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = dx / d;\n        this.uniforms.delta.y = dy / d;\n    }\n}\n","import TiltShiftAxisFilter from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nexport default class TiltShiftYFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = -dy / d;\n        this.uniforms.delta.y = dx / d;\n    }\n}","import TiltShiftXFilter from './TiltShiftXFilter';\nimport TiltShiftYFilter from './TiltShiftYFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [blur=100] The strength of the blur.\n * @param {number} [gradientBlur=600] The strength of the gradient blur.\n * @param {PIXI.Point} [start=null] The Y value to start the effect at.\n * @param {PIXI.Point} [end=null] The Y value to end the effect at.\n */\nexport default class TiltShiftFilter extends PIXI.Filter {\n    \n    constructor(blur = 100, gradientBlur = 600, start = null, end = null) {\n        super();\n        this.tiltShiftXFilter = new TiltShiftXFilter(blur, gradientBlur, start, end);\n        this.tiltShiftYFilter = new TiltShiftYFilter(blur, gradientBlur, start, end);\n    }\n\n    apply(filterManager, input, output) {\n        let renderTarget = filterManager.getRenderTarget(true);\n        this.tiltShiftXFilter.apply(filterManager, input, renderTarget);\n        this.tiltShiftYFilter.apply(filterManager, renderTarget, output);\n        filterManager.returnRenderTarget(renderTarget);\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     */\n    get blur() {\n        return this.tiltShiftXFilter.blur;\n    }\n    set blur(value) {\n        this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     */\n    get gradientBlur() {\n        return this.tiltShiftXFilter.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n    }\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get start() {\n        return this.tiltShiftXFilter.start;\n    }\n    set start(value) {\n        this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n    }\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get end() {\n        return this.tiltShiftXFilter.end;\n    }\n    set end(value) {\n        this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n    }\n}","import vertex from '../fragments/default.vert';\nimport fragment from './twist.frag';\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number} [radius=200] The radius of the twist.\n * @param {number} [angle=4] The angle of the twist.\n * @param {number} [padding=20] Padding for filter area.\n */\nexport default class TwistFilter extends PIXI.Filter {\n    constructor(radius = 200, angle = 4, padding = 20) {\n        super(vertex, fragment);\n\n        this.radius = radius;\n        this.angle = angle;\n        this.padding = padding;\n    }\n\n    /**\n     * This point describes the the offset of the twist.\n     *\n     * @member {PIXI.Point}\n     */\n    get offset() {\n        return this.uniforms.offset;\n    }\n    set offset(value) {\n        this.uniforms.offset = value;\n    }\n\n    /**\n     * The radius of the twist.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The angle of the twist.\n     *\n     * @member {number}\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n"],"names":["AsciiFilter","size","super","this","vertex","fragment","prototypeAccessors","uniforms","pixelSize","value","PIXI","Filter","filters","BlurXFilter","BlurYFilter","VoidFilter","BloomFilter","blur","blurXFilter","blurYFilter","blendMode","BLEND_MODES","SCREEN","defaultFilter","Point","blurX","x","blurY","y","apply","filterManager","input","output","const","renderTarget","getRenderTarget","returnRenderTarget","BulgePinchFilter","center","radius","strength","ColorReplaceFilter","originalColor","newColor","epsilon","let","arr","utils","hex2rgb","_originalColor","rgb2hex","_newColor","ConvolutionFilter","matrix","width","height","Float32Array","texelSize","CrossHatchFilter","DotFilter","scale","angle","DropShadowFilter","rotation","distance","color","alpha","tintFilter","blurFilter","BlurFilter","padding","target","clear","root","transform","Matrix","translate","Math","cos","sin","updatePadding","max","_distance","DEG_TO_RAD","EmbossFilter","GlowFilter","outerStrength","innerStrength","quality","replace","toFixed","glowColor","OutlineFilter","thickness","outlineColor","PixelateFilter","RGBSplitFilter","red","green","blue","ShockwaveFilter","params","time","type","z","SimpleLightmapFilter","lightmapTexture","ambientColor","resolution","u_lightmap","texture","TiltShiftAxisFilter","gradientBlur","start","end","window","innerHeight","delta","texSize","innerWidth","updateDelta","TiltShiftXFilter","dx","dy","d","sqrt","TiltShiftYFilter","TiltShiftFilter","tiltShiftXFilter","tiltShiftYFilter","TwistFilter","offset"],"mappings":"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"}