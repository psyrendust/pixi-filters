/*!
 * pixi-filters - v1.0.8
 * Compiled Thu, 20 Jul 2017 15:28:41 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.__pixiFilters={})}(this,function(t){"use strict";if(void 0===PIXI.Filter)throw"PixiJS is required";var e="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",r="varying vec2 vTextureCoord;\n\nuniform vec4 filterArea;\nuniform float pixelSize;\nuniform sampler2D uSampler;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n    return floor( coord / size ) * size;\n}\n\nvec2 getMod(vec2 coord, vec2 size)\n{\n    return mod( coord , size) / size;\n}\n\nfloat character(float n, vec2 p)\n{\n    p = floor(p*vec2(4.0, -4.0) + 2.5);\n    if (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\n    {\n        if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\n    }\n    return 0.0;\n}\n\nvoid main()\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    // get the rounded color..\n    vec2 pixCoord = pixelate(coord, vec2(pixelSize));\n    pixCoord = unmapCoord(pixCoord);\n\n    vec4 color = texture2D(uSampler, pixCoord);\n\n    // determine the character to use\n    float gray = (color.r + color.g + color.b) / 3.0;\n\n    float n =  65536.0;             // .\n    if (gray > 0.2) n = 65600.0;    // :\n    if (gray > 0.3) n = 332772.0;   // *\n    if (gray > 0.4) n = 15255086.0; // o\n    if (gray > 0.5) n = 23385164.0; // &\n    if (gray > 0.6) n = 15252014.0; // 8\n    if (gray > 0.7) n = 13199452.0; // @\n    if (gray > 0.8) n = 11512810.0; // #\n\n    // get the mod..\n    vec2 modd = getMod(coord, vec2(pixelSize));\n\n    gl_FragColor = color * character( n, vec2(-1.0) + modd * 2.0);\n\n}",o=function(t){function o(o){void 0===o&&(o=8),t.call(this,e,r),this.size=o}t&&(o.__proto__=t),(o.prototype=Object.create(t&&t.prototype)).constructor=o;var n={size:{}};return n.size.get=function(){return this.uniforms.pixelSize},n.size.set=function(t){this.uniforms.pixelSize=t},Object.defineProperties(o.prototype,n),o}(PIXI.Filter),n=PIXI.filters,i=n.BlurXFilter,l=n.BlurYFilter,a=n.VoidFilter,u=function(t){function e(e){void 0===e&&(e=2),t.call(this),this.blurXFilter=new i,this.blurYFilter=new l,this.blurYFilter.blendMode=PIXI.BLEND_MODES.SCREEN,this.defaultFilter=new a,"number"==typeof e?this.blur=e:e instanceof PIXI.Point&&(this.blurX=e.x,this.blurY=e.y)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={blur:{},blurX:{},blurY:{}};return e.prototype.apply=function(t,e,r){var o=t.getRenderTarget(!0);this.defaultFilter.apply(t,e,r),this.blurXFilter.apply(t,e,o),this.blurYFilter.apply(t,o,r),t.returnRenderTarget(o)},r.blur.get=function(){return this.blurXFilter.blur},r.blur.set=function(t){this.blurXFilter.blur=this.blurYFilter.blur=t},r.blurX.get=function(){return this.blurXFilter.blur},r.blurX.set=function(t){this.blurXFilter.blur=t},r.blurY.get=function(){return this.blurYFilter.blur},r.blurY.set=function(t){this.blurYFilter.blur=t},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),s="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n",c="uniform float radius;\nuniform float strength;\nuniform vec2 center;\nuniform sampler2D uSampler;\nuniform vec4 dimensions;\nvarying vec2 vTextureCoord;\nvoid main()\n{\n    vec2 coord = vTextureCoord * dimensions.xy;\n    coord -= center;\n    float distance = length(coord);\n    if (distance < radius) {\n        float percent = distance / radius;\n        if (strength > 0.0) {\n            coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);\n        } else {\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\n        }\n    }\n    coord += center;\n    gl_FragColor = texture2D(uSampler, coord / dimensions.xy);\n    vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);\n    if (coord != clampedCoord) {\n    gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\n    }\n}\n",f=function(t){function e(e,r,o){t.call(this,s,c),this.center=e||[.5,.5],this.radius=r||100,this.strength=o||1}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={radius:{},strength:{},center:{}};return r.radius.get=function(){return this.uniforms.radius},r.radius.set=function(t){this.uniforms.radius=t},r.strength.get=function(){return this.uniforms.strength},r.strength.set=function(t){this.uniforms.strength=t},r.center.get=function(){return this.uniforms.center},r.center.set=function(t){this.uniforms.center=t},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),d="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n",p="varying vec2 vTextureCoord;\nuniform sampler2D texture;\nuniform vec3 originalColor;\nuniform vec3 newColor;\nuniform float epsilon;\nvoid main(void) {\n    vec4 currentColor = texture2D(texture, vTextureCoord);\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\n    float colorDistance = length(colorDiff);\n    float doReplace = step(colorDistance, epsilon);\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\n}\n",m=function(t){function e(e,r,o){void 0===e&&(e=16711680),void 0===r&&(r=0),void 0===o&&(o=.4),t.call(this,d,p),this.originalColor=e,this.newColor=r,this.epsilon=o}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={originalColor:{},newColor:{},epsilon:{}};return r.originalColor.set=function(t){var e=this.uniforms.originalColor;"number"==typeof t?(PIXI.utils.hex2rgb(t,e),this._originalColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._originalColor=PIXI.utils.rgb2hex(e))},r.originalColor.get=function(){return this._originalColor},r.newColor.set=function(t){var e=this.uniforms.newColor;"number"==typeof t?(PIXI.utils.hex2rgb(t,e),this._newColor=t):(e[0]=t[0],e[1]=t[1],e[2]=t[2],this._newColor=PIXI.utils.rgb2hex(e))},r.newColor.get=function(){return this._newColor},r.epsilon.set=function(t){this.uniforms.epsilon=t},r.epsilon.get=function(){return this.uniforms.epsilon},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),v="precision mediump float;\n\nvarying mediump vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec2 texelSize;\nuniform float matrix[9];\n\nvoid main(void)\n{\n   vec4 c11 = texture2D(uSampler, vTextureCoord - texelSize); // top left\n   vec4 c12 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - texelSize.y)); // top center\n   vec4 c13 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y - texelSize.y)); // top right\n\n   vec4 c21 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y)); // mid left\n   vec4 c22 = texture2D(uSampler, vTextureCoord); // mid center\n   vec4 c23 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y)); // mid right\n\n   vec4 c31 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y + texelSize.y)); // bottom left\n   vec4 c32 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + texelSize.y)); // bottom center\n   vec4 c33 = texture2D(uSampler, vTextureCoord + texelSize); // bottom right\n\n   gl_FragColor =\n       c11 * matrix[0] + c12 * matrix[1] + c13 * matrix[2] +\n       c21 * matrix[3] + c22 * matrix[4] + c23 * matrix[5] +\n       c31 * matrix[6] + c32 * matrix[7] + c33 * matrix[8];\n\n   gl_FragColor.a = c22.a;\n}\n",h=function(t){function r(r,o,n){t.call(this,e,v),this.matrix=r,this.width=o,this.height=n}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={matrix:{},width:{},height:{}};return o.matrix.get=function(){return this.uniforms.matrix},o.matrix.set=function(t){this.uniforms.matrix=new Float32Array(t)},o.width.get=function(){return 1/this.uniforms.texelSize[0]},o.width.set=function(t){this.uniforms.texelSize[0]=1/t},o.height.get=function(){return 1/this.uniforms.texelSize[1]},o.height.set=function(t){this.uniforms.texelSize[1]=1/t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),g="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\n    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);\n\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\n    if (lum < 1.00)\n    {\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    if (lum < 0.75)\n    {\n        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    if (lum < 0.50)\n    {\n        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    if (lum < 0.3)\n    {\n        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0)\n        {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n}\n",x=function(t){function r(){t.call(this,e,g)}return t&&(r.__proto__=t),r.prototype=Object.create(t&&t.prototype),r.prototype.constructor=r,r}(PIXI.Filter),C="precision mediump float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform vec4 filterArea;\nuniform sampler2D uSampler;\n\nuniform float angle;\nuniform float scale;\n\nfloat pattern()\n{\n   float s = sin(angle), c = cos(angle);\n   vec2 tex = vTextureCoord * filterArea.xy;\n   vec2 point = vec2(\n       c * tex.x - s * tex.y,\n       s * tex.x + c * tex.y\n   ) * scale;\n   return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\nvoid main()\n{\n   vec4 color = texture2D(uSampler, vTextureCoord);\n   float average = (color.r + color.g + color.b) / 3.0;\n   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\n}\n",y=function(t){function r(r,o){void 0===r&&(r=1),void 0===o&&(o=5),t.call(this,e,C),this.scale=r,this.angle=o}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={scale:{},angle:{}};return o.scale.get=function(){return this.uniforms.scale},o.scale.set=function(t){this.uniforms.scale=t},o.angle.get=function(){return this.uniforms.angle},o.angle.set=function(t){this.uniforms.angle=t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),b="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform float alpha;\nuniform vec3 color;\nvoid main(void){\n    vec4 sample = texture2D(uSampler, vTextureCoord);\n    gl_FragColor = vec4(color, sample.a > 0.0 ? alpha : 0.0);\n}",_=function(t){function r(r,o,n,i,l){void 0===r&&(r=45),void 0===o&&(o=5),void 0===n&&(n=2),void 0===i&&(i=0),void 0===l&&(l=.5),t.call(this),this.tintFilter=new PIXI.Filter(e,b),this.blurFilter=new PIXI.filters.BlurFilter,this.blurFilter.blur=n,this.rotation=r,this.padding=o,this.distance=o,this.alpha=l,this.color=i}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={distance:{},rotation:{},blur:{},alpha:{},color:{}};return r.prototype.apply=function(e,r,o){var n=e.getRenderTarget();n.clear(),o.root||o.clear(),n.transform=new PIXI.Matrix,n.transform.translate(this.distance*Math.cos(this.angle),this.distance*Math.sin(this.angle)),this.tintFilter.apply(e,r,n),this.blurFilter.apply(e,n,o),t.prototype.apply.call(this,e,r,o),n.transform=null,e.returnRenderTarget(n)},r.prototype.updatePadding=function(){this.padding=Math.max(this.distance,10)*this.blur*2},o.distance.get=function(){return this._distance},o.distance.set=function(t){this._distance=t,this.updatePadding()},o.rotation.get=function(){return this.angle/PIXI.DEG_TO_RAD},o.rotation.set=function(t){this.angle=t*PIXI.DEG_TO_RAD},o.blur.get=function(){return this.blurFilter.blur},o.blur.set=function(t){this.blurFilter.blur=t,this.updatePadding()},o.alpha.get=function(){return this.tintFilter.uniforms.alpha},o.alpha.set=function(t){this.tintFilter.uniforms.alpha=t},o.color.get=function(){return PIXI.utils.rgb2hex(this.tintFilter.uniforms.color)},o.color.set=function(t){PIXI.utils.hex2rgb(t,this.tintFilter.uniforms.color)},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),F="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float strength;\nuniform vec4 filterArea;\n\n\nvoid main(void)\n{\n\tvec2 onePixel = vec2(1.0 / filterArea);\n\n\tvec4 color;\n\n\tcolor.rgb = vec3(0.5);\n\n\tcolor -= texture2D(uSampler, vTextureCoord - onePixel) * strength;\n\tcolor += texture2D(uSampler, vTextureCoord + onePixel) * strength;\n\n\tcolor.rgb = vec3((color.r + color.g + color.b) / 3.0);\n\n\tfloat alpha = texture2D(uSampler, vTextureCoord).a;\n\n\tgl_FragColor = vec4(color.rgb * alpha, alpha);\n}\n",S=function(t){function r(r){void 0===r&&(r=5),t.call(this,e,F),this.strength=r}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={strength:{}};return o.strength.get=function(){return this.uniforms.strength},o.strength.set=function(t){this.uniforms.strength=t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),T="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n",I="varying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform sampler2D uSampler;\n\nuniform float distance;\nuniform float outerStrength;\nuniform float innerStrength;\nuniform vec4 glowColor;\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nvec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\n\nvoid main(void) {\n    const float PI = 3.14159265358979323846264;\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float totalAlpha = 0.0;\n    float maxTotalAlpha = 0.0;\n    float cosAngle;\n    float sinAngle;\n    vec2 displaced;\n    for (float angle = 0.0; angle <= PI * 2.0; angle += %QUALITY_DIST%) {\n       cosAngle = cos(angle);\n       sinAngle = sin(angle);\n       for (float curDistance = 1.0; curDistance <= %DIST%; curDistance++) {\n           displaced.x = vTextureCoord.x + cosAngle * curDistance * px.x;\n           displaced.y = vTextureCoord.y + sinAngle * curDistance * px.y;\n           curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\n           totalAlpha += (distance - curDistance) * curColor.a;\n           maxTotalAlpha += (distance - curDistance);\n       }\n    }\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\n\n    ownColor.a = max(ownColor.a, 0.0001);\n    ownColor.rgb = ownColor.rgb / ownColor.a;\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\n}\n",P=function(t){function e(e,r,o,n,i){void 0===e&&(e=10),void 0===r&&(r=4),void 0===o&&(o=0),void 0===n&&(n=16777215),void 0===i&&(i=.1),t.call(this,T,I.replace(/%QUALITY_DIST%/gi,""+(1/i/e).toFixed(7)).replace(/%DIST%/gi,""+e.toFixed(7))),this.uniforms.glowColor=new Float32Array([0,0,0,1]),this.distance=e,this.color=n,this.outerStrength=r,this.innerStrength=o}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={color:{},distance:{},outerStrength:{},innerStrength:{}};return r.color.get=function(){return PIXI.utils.rgb2hex(this.uniforms.glowColor)},r.color.set=function(t){PIXI.utils.hex2rgb(t,this.uniforms.glowColor)},r.distance.get=function(){return this.uniforms.distance},r.distance.set=function(t){this.uniforms.distance=t},r.outerStrength.get=function(){return this.uniforms.outerStrength},r.outerStrength.set=function(t){this.uniforms.outerStrength=t},r.innerStrength.get=function(){return this.uniforms.innerStrength},r.innerStrength.set=function(t){this.uniforms.innerStrength=t},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),w="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n",D="varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float thickness;\nuniform vec4 outlineColor;\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nvec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\n\nvoid main(void) {\n    const float PI = 3.14159265358979323846264;\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float maxAlpha = 0.;\n    vec2 displaced;\n    for (float angle = 0.; angle < PI * 2.; angle += %THICKNESS% ) {\n        displaced.x = vTextureCoord.x + thickness * px.x * cos(angle);\n        displaced.y = vTextureCoord.y + thickness * px.y * sin(angle);\n        curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\n        maxAlpha = max(maxAlpha, curColor.a);\n    }\n    float resultAlpha = max(maxAlpha, ownColor.a);\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\n}\n",A=function(t){function e(e,r){void 0===e&&(e=1),void 0===r&&(r=0),t.call(this,w,D.replace(/%THICKNESS%/gi,(1/e).toFixed(7))),this.thickness=e,this.uniforms.outlineColor=new Float32Array([0,0,0,1]),this.color=r}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={color:{},thickness:{}};return r.color.get=function(){return PIXI.utils.rgb2hex(this.uniforms.outlineColor)},r.color.set=function(t){PIXI.utils.hex2rgb(t,this.uniforms.outlineColor)},r.thickness.get=function(){return this.uniforms.thickness},r.thickness.set=function(t){this.uniforms.thickness=t},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),X="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform vec2 size;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 pixelate(vec2 coord, vec2 size)\n{\n\treturn floor( coord / size ) * size;\n}\n\nvoid main(void)\n{\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = pixelate(coord, size);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord);\n}\n",z=function(t){function r(r){void 0===r&&(r=10),t.call(this,e,X),this.size=r}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={size:{}};return o.size.get=function(){return this.uniforms.size},o.size.set=function(t){"number"==typeof t&&(t=[t,t]),this.uniforms.size=t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),j="precision mediump float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\nuniform vec2 red;\nuniform vec2 green;\nuniform vec2 blue;\n\nvoid main(void)\n{\n   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/filterArea.xy).r;\n   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/filterArea.xy).g;\n   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/filterArea.xy).b;\n   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;\n}\n",O=function(t){function r(r,o,n){void 0===r&&(r=[-10,0]),void 0===o&&(o=[0,10]),void 0===n&&(n=[0,0]),t.call(this,e,j),this.red=r,this.green=o,this.blue=n}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={red:{},green:{},blue:{}};return o.red.get=function(){return this.uniforms.red},o.red.set=function(t){this.uniforms.red=t},o.green.get=function(){return this.uniforms.green},o.green.set=function(t){this.uniforms.green=t},o.blue.get=function(){return this.uniforms.blue},o.blue.set=function(t){this.uniforms.blue=t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),M="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nuniform vec2 center;\nuniform vec3 params; // 10.0, 0.8, 0.1\nuniform float time;\n\nvoid main()\n{\n    vec2 uv = vTextureCoord;\n    vec2 texCoord = uv;\n\n    float dist = distance(uv, center);\n\n    if ( (dist <= (time + params.z)) && (dist >= (time - params.z)) )\n    {\n        float diff = (dist - time);\n        float powDiff = 1.0 - pow(abs(diff*params.x), params.y);\n\n        float diffTime = diff  * powDiff;\n        vec2 diffUV = normalize(uv - center);\n        texCoord = uv + (diffUV * diffTime);\n    }\n\n    gl_FragColor = texture2D(uSampler, texCoord);\n}\n",B=function(t){function r(r,o,n){void 0===r&&(r=[.5,.5]),void 0===o&&(o=[10,.8,.1]),void 0===n&&(n=0),t.call(this,e,M,{center:{type:"v2",value:{x:.5,y:.5}},params:{type:"v3",value:{x:10,y:.8,z:.1}},time:{type:"1f",value:0}}),this.center=r,this.params=o,this.time=n}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={center:{},params:{},time:{}};return o.center.get=function(){return this.uniforms.center},o.center.set=function(t){this.uniforms.center=t},o.params.get=function(){return this.uniforms.params},o.params.set=function(t){this.uniforms.params=t},o.time.get=function(){return this.uniforms.time},o.time.set=function(t){this.uniforms.time=t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),Y="precision mediump float;\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float thickness;\nuniform vec4 outlineColor;\nuniform float pixelWidth;\nuniform float pixelHeight;\nvec2 px = vec2(pixelWidth, pixelHeight);\n\nvoid main(void) {\n    const float PI = 3.14159265358979323846264;\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float maxAlpha = 0.;\n    for (float angle = 0.; angle < PI * 2.; angle +=  + (1 / thickness).toFixed(7) + ) {\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\n        maxAlpha = max(maxAlpha, curColor.a);\n    }\n    float resultAlpha = max(maxAlpha, ownColor.a);\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\n}\n",k="varying vec4 vColor;\nvarying vec2 vTextureCoord;\nuniform sampler2D u_texture; //diffuse map\nuniform sampler2D u_lightmap;   //light map\nuniform vec2 resolution; //resolution of screen\nuniform vec4 ambientColor; //ambient RGB, alpha channel is intensity\nvoid main() {\n    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);\n    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);\n    vec4 light = texture2D(u_lightmap, vTextureCoord);\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\n    vec3 intensity = ambient + light.rgb;\n    vec3 finalColor = diffuseColor.rgb * intensity;\n    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);\n}\n",R=function(t){function e(e,r,o){void 0===o&&(o=[1,1]),t.call(this,Y,k),this.uniforms.u_lightmap=e,this.uniforms.resolution=new Float32Array(o),this.uniforms.ambientColor=new Float32Array(r)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={texture:{},color:{},resolution:{}};return r.texture.get=function(){return this.uniforms.u_lightmap},r.texture.set=function(t){this.uniforms.u_lightmap=t},r.color.get=function(){return this.uniforms.ambientColor},r.color.set=function(t){this.uniforms.ambientColor=new Float32Array(t)},r.resolution.get=function(){return this.uniforms.resolution},r.resolution.set=function(t){this.uniforms.resolution=new Float32Array(t)},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),V="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float blur;\nuniform float gradientBlur;\nuniform vec2 start;\nuniform vec2 end;\nuniform vec2 delta;\nuniform vec2 texSize;\n\nfloat random(vec3 scale, float seed)\n{\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n\nvoid main(void)\n{\n    vec4 color = vec4(0.0);\n    float total = 0.0;\n\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n    vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n    float radius = smoothstep(0.0, 1.0, abs(dot(vTextureCoord * texSize - start, normal)) / gradientBlur) * blur;\n\n    for (float t = -30.0; t <= 30.0; t++)\n    {\n        float percent = (t + offset - 0.5) / 30.0;\n        float weight = 1.0 - abs(percent);\n        vec4 sample = texture2D(uSampler, vTextureCoord + delta / texSize * percent * radius);\n        sample.rgb *= sample.a;\n        color += sample * weight;\n        total += weight;\n    }\n\n    gl_FragColor = color / total;\n    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n}\n",G=function(t){function r(r,o,n,i){void 0===r&&(r=100),void 0===o&&(o=600),void 0===n&&(n=null),void 0===i&&(i=null),t.call(this,e,V),this.uniforms.blur=r,this.uniforms.gradientBlur=o,this.uniforms.start=n||new PIXI.Point(0,window.innerHeight/2),this.uniforms.end=i||new PIXI.Point(600,window.innerHeight/2),this.uniforms.delta=new PIXI.Point(30,30),this.uniforms.texSize=new PIXI.Point(window.innerWidth,window.innerHeight),this.updateDelta()}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={blur:{},gradientBlur:{},start:{},end:{}};return r.prototype.updateDelta=function(){this.uniforms.delta.x=0,this.uniforms.delta.y=0},o.blur.get=function(){return this.uniforms.blur},o.blur.set=function(t){this.uniforms.blur=t},o.gradientBlur.get=function(){return this.uniforms.gradientBlur},o.gradientBlur.set=function(t){this.uniforms.gradientBlur=t},o.start.get=function(){return this.uniforms.start},o.start.set=function(t){this.uniforms.start=t,this.updateDelta()},o.end.get=function(){return this.uniforms.end},o.end.set=function(t){this.uniforms.end=t,this.updateDelta()},Object.defineProperties(r.prototype,o),r}(PIXI.Filter),E=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.updateDelta=function(){var t=this.uniforms.end.x-this.uniforms.start.x,e=this.uniforms.end.y-this.uniforms.start.y,r=Math.sqrt(t*t+e*e);this.uniforms.delta.x=t/r,this.uniforms.delta.y=e/r},e}(G),H=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.updateDelta=function(){var t=this.uniforms.end.x-this.uniforms.start.x,e=this.uniforms.end.y-this.uniforms.start.y,r=Math.sqrt(t*t+e*e);this.uniforms.delta.x=-e/r,this.uniforms.delta.y=t/r},e}(G),L=function(t){function e(e,r,o,n){void 0===e&&(e=100),void 0===r&&(r=600),void 0===o&&(o=null),void 0===n&&(n=null),t.call(this),this.tiltShiftXFilter=new E(e,r,o,n),this.tiltShiftYFilter=new H(e,r,o,n)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var r={blur:{},gradientBlur:{},start:{},end:{}};return e.prototype.apply=function(t,e,r){var o=t.getRenderTarget(!0);this.tiltShiftXFilter.apply(t,e,o),this.tiltShiftYFilter.apply(t,o,r),t.returnRenderTarget(o)},r.blur.get=function(){return this.tiltShiftXFilter.blur},r.blur.set=function(t){this.tiltShiftXFilter.blur=this.tiltShiftYFilter.blur=t},r.gradientBlur.get=function(){return this.tiltShiftXFilter.gradientBlur},r.gradientBlur.set=function(t){this.tiltShiftXFilter.gradientBlur=this.tiltShiftYFilter.gradientBlur=t},r.start.get=function(){return this.tiltShiftXFilter.start},r.start.set=function(t){this.tiltShiftXFilter.start=this.tiltShiftYFilter.start=t},r.end.get=function(){return this.tiltShiftXFilter.end},r.end.set=function(t){this.tiltShiftXFilter.end=this.tiltShiftYFilter.end=t},Object.defineProperties(e.prototype,r),e}(PIXI.Filter),N="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform float radius;\nuniform float angle;\nuniform vec2 offset;\nuniform vec4 filterArea;\n\nvec2 mapCoord( vec2 coord )\n{\n    coord *= filterArea.xy;\n    coord += filterArea.zw;\n\n    return coord;\n}\n\nvec2 unmapCoord( vec2 coord )\n{\n    coord -= filterArea.zw;\n    coord /= filterArea.xy;\n\n    return coord;\n}\n\nvec2 twist(vec2 coord)\n{\n    coord -= offset;\n\n    float dist = length(coord);\n\n    if (dist < radius)\n    {\n        float ratioDist = (radius - dist) / radius;\n        float angleMod = ratioDist * ratioDist * angle;\n        float s = sin(angleMod);\n        float c = cos(angleMod);\n        coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\n    }\n\n    coord += offset;\n\n    return coord;\n}\n\nvoid main(void)\n{\n\n    vec2 coord = mapCoord(vTextureCoord);\n\n    coord = twist(coord);\n\n    coord = unmapCoord(coord);\n\n    gl_FragColor = texture2D(uSampler, coord );\n\n}\n",U=function(t){function r(r,o,n){void 0===r&&(r=200),void 0===o&&(o=4),void 0===n&&(n=20),t.call(this,e,N),this.radius=r,this.angle=o,this.padding=n}t&&(r.__proto__=t),(r.prototype=Object.create(t&&t.prototype)).constructor=r;var o={offset:{},radius:{},angle:{}};return o.offset.get=function(){return this.uniforms.offset},o.offset.set=function(t){this.uniforms.offset=t},o.radius.get=function(){return this.uniforms.radius},o.radius.set=function(t){this.uniforms.radius=t},o.angle.get=function(){return this.uniforms.angle},o.angle.set=function(t){this.uniforms.angle=t},Object.defineProperties(r.prototype,o),r}(PIXI.Filter);t.AsciiFilter=o,t.BloomFilter=u,t.BulgePinchFilter=f,t.ColorReplaceFilter=m,t.ConvolutionFilter=h,t.CrossHatchFilter=x,t.DotFilter=y,t.DropShadowFilter=_,t.EmbossFilter=S,t.GlowFilter=P,t.OutlineFilter=A,t.PixelateFilter=z,t.RGBSplitFilter=O,t.ShockwaveFilter=B,t.SimpleLightmapFilter=R,t.TiltShiftFilter=L,t.TiltShiftAxisFilter=G,t.TiltShiftXFilter=E,t.TiltShiftYFilter=H,t.TwistFilter=U,Object.defineProperty(t,"__esModule",{value:!0}),Object.assign(PIXI.filters,__pixiFilters)});
//# sourceMappingURL=filters.min.js.map
