/*!
 * pixi-filters - v1.0.8
 * Compiled Thu, 20 Jul 2017 15:29:01 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.__pixiFilters={})}(this,function(e){"use strict";if(void 0===PIXI.Filter)throw"PixiJS is required";var t="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",i="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nuniform vec2 center;\nuniform vec3 params; // 10.0, 0.8, 0.1\nuniform float time;\n\nvoid main()\n{\n    vec2 uv = vTextureCoord;\n    vec2 texCoord = uv;\n\n    float dist = distance(uv, center);\n\n    if ( (dist <= (time + params.z)) && (dist >= (time - params.z)) )\n    {\n        float diff = (dist - time);\n        float powDiff = 1.0 - pow(abs(diff*params.x), params.y);\n\n        float diffTime = diff  * powDiff;\n        vec2 diffUV = normalize(uv - center);\n        texCoord = uv + (diffUV * diffTime);\n    }\n\n    gl_FragColor = texture2D(uSampler, texCoord);\n}\n",n=function(e){function n(n,r,o){void 0===n&&(n=[.5,.5]),void 0===r&&(r=[10,.8,.1]),void 0===o&&(o=0),e.call(this,t,i,{center:{type:"v2",value:{x:.5,y:.5}},params:{type:"v3",value:{x:10,y:.8,z:.1}},time:{type:"1f",value:0}}),this.center=n,this.params=r,this.time=o}e&&(n.__proto__=e),(n.prototype=Object.create(e&&e.prototype)).constructor=n;var r={center:{},params:{},time:{}};return r.center.get=function(){return this.uniforms.center},r.center.set=function(e){this.uniforms.center=e},r.params.get=function(){return this.uniforms.params},r.params.set=function(e){this.uniforms.params=e},r.time.get=function(){return this.uniforms.time},r.time.set=function(e){this.uniforms.time=e},Object.defineProperties(n.prototype,r),n}(PIXI.Filter);e.ShockwaveFilter=n,Object.defineProperty(e,"__esModule",{value:!0}),Object.assign(PIXI.filters,__pixiFilters)});
//# sourceMappingURL=shockwave.min.js.map
