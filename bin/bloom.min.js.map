{"version":3,"file":"bloom.min.js","sources":["../src/bloom/BloomFilter.js"],"sourcesContent":["const {BlurXFilter, BlurYFilter, VoidFilter} = PIXI.filters;\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @param {number|PIXI.Point} [blur=2] Sets the strength of both the blurX and blurY properties simultaneously\n */\nexport default class BloomFilter extends PIXI.Filter {\n\n    constructor(blur = 2) {\n        super();\n        this.blurXFilter = new BlurXFilter();\n        this.blurYFilter = new BlurYFilter();\n        this.blurYFilter.blendMode = PIXI.BLEND_MODES.SCREEN;\n        this.defaultFilter = new VoidFilter();\n\n        if (typeof blur === 'number') {\n            this.blur = blur;\n        }\n        else if (blur instanceof PIXI.Point) {\n            this.blurX = blur.x;\n            this.blurY = blur.y;\n        }\n    }\n\n    apply(filterManager, input, output) {\n        const renderTarget = filterManager.getRenderTarget(true);\n\n        //TODO - copyTexSubImage2D could be used here?\n        this.defaultFilter.apply(filterManager, input, output);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget);\n        this.blurYFilter.apply(filterManager, renderTarget, output);\n\n        filterManager.returnRenderTarget(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this.blurXFilter.blur;\n    }\n    set blur(value) {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX() {\n        return this.blurXFilter.blur;\n    }\n    set blurX(value) {\n        this.blurXFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY() {\n        return this.blurYFilter.blur;\n    }\n    set blurY(value) {\n        this.blurYFilter.blur = value;\n    }\n}\n"],"names":["PIXI","filters","BlurXFilter","BlurYFilter","VoidFilter","BloomFilter","blur","super","this","blurXFilter","blurYFilter","blendMode","BLEND_MODES","SCREEN","defaultFilter","Point","blurX","x","blurY","y","apply","filterManager","input","output","const","renderTarget","getRenderTarget","returnRenderTarget","prototypeAccessors","value","Filter"],"mappings":";;;;;;;kPAAK,MAA0CA,KAAKC,QAA7CC,gBAAaC,gBAAaC,eAWZC,cAAgC,WAErCC,kBAAO,GACfC,OAAMC,MACNA,KAAKC,YAAc,IAAIP,EACvBM,KAAKE,YAAc,IAAIP,EACvBK,KAAKE,YAAYC,UAAYX,KAAKY,YAAYC,OAC9CL,KAAKM,cAAgB,IAAIV,EAEL,iBAATE,EACPE,KAAKF,KAAOA,EAEPA,aAAgBN,KAAKe,QAC1BP,KAAKQ,MAAQV,EAAKW,EAClBT,KAAKU,MAAQZ,EAAKa,yHAI1Bd,YAAAe,eAAMC,EAAeC,EAAOC,GACxBC,IAAMC,EAAeJ,EAAcK,iBAAgB,GAGnDlB,KAAKM,cAAcM,MAAMC,EAAeC,EAAOC,GAE/Cf,KAAKC,YAAYW,MAAMC,EAAeC,EAAOG,GAC7CjB,KAAKE,YAAYU,MAAMC,EAAeI,EAAcF,GAEpDF,EAAcM,mBAAmBF,IASrCG,EAAAtB,oBACI,OAAOE,KAAKC,YAAYH,MAE5BsB,EAAAtB,kBAASuB,GACLrB,KAAKC,YAAYH,KAAOE,KAAKE,YAAYJ,KAAOuB,GASpDD,EAAAZ,qBACI,OAAOR,KAAKC,YAAYH,MAE5BsB,EAAAZ,mBAAUa,GACNrB,KAAKC,YAAYH,KAAOuB,GAS5BD,EAAAV,qBACI,OAAOV,KAAKE,YAAYJ,MAE5BsB,EAAAV,mBAAUW,GACNrB,KAAKE,YAAYJ,KAAOuB,6CAlES7B,KAAK8B"}